#!/bin/sh
##########################################
# Written 03/06/2009 by eg
##########################################


##########################################
# Define Functions
##########################################

# Output command line usage information.
Usage()
{
  cmd=`basename ${0}`
  echo ""
  echo "${0} -t2 <img> -pd <img> seg <img> -out <img> [options]"
  echo ""
  echo "Options:"
  echo "  -t2 <img>:  T2 image, required"
  echo "  -pd <img>:  PD image, required"
  echo "  -seg <img>: T1 segmentation with VCSF relabelled, required (usually vcsf_woc)"
  echo "  -out <img>: Output image, required"
  echo "  -t1 <img>:  T1 image, optional, but required for -csfgm option"
  echo "  -vdilatecross <int>:  Dilate VCSF with cross SE of radius <int>"
  echo "  -vdilateball <int>:   Dilate VCSF with ball SE of radius <int>"
  echo "  -minobjectsize <int>: Keeps lesions that are >= <int> voxels"
  echo "  -forcefcm:            Forces generation of _fc_mc4_ex2 image"
  echo "  -edge:                Use old edge cleaner for false positive minimization,"
  echo "                        no T1 required"  
  echo "  -csfgm:               Use new CSFGM mask for false positive minimization,"
  echo "                        T1 required"
  echo "  -nofpm:               No false positive minimization performed,"
  echo "                        no T1 required"
  echo "  -debug:               Keeps intermediary files"
  echo "  -pdt <int>:           PD threshold for Lsegment (>0 and <1)"
  echo "  -t2t <int>:           T2 threshold for Lsegment (>0 and <1)"
  echo "  -ct <int>             Threshold for CSFGM (>0 and < 1000)"
  echo "  -vcsf <int>:          Value assigned to VCSF on the T1 segmentation"
  echo ""
  echo "Notes:"
  echo " -default options for script (3T VHAD data, 2008): "
  echo "    -vdilateball 1 -csfgm -minobjectsize 5 -vcsf 7 -pdt 0.05 -t2t 0.02 -ct 150"
  exit
}

parse_arguments(){
  while [ ${#} -gt 0 ]
  do
    case ${1} in
    -pd)
      shift; pd=`echo ${1} | sed "s/\.img$//" | sed "s/\.hdr$//" | sed "s/\.$//"`; shift;;
    -t2)
      shift; t2=`echo ${1} | sed "s/\.img$//" | sed "s/\.hdr$//" | sed "s/\.$//"`; shift;;
    -seg)
      shift; seg=`echo ${1} | sed "s/\.img$//" | sed "s/\.hdr$//" | sed "s/\.$//"`; shift;;
    -t1)
      shift; t1=`echo ${1} | sed "s/\.img$//" | sed "s/\.hdr$//" | sed "s/\.$//"`; shift;;      
    -out)
      shift; out=`echo ${1} | sed "s/\.img$//" | sed "s/\.hdr$//" | sed "s/\.$//"`; shift;;      
    -t2t)
      shift; t2t=${1}; shift;;
    -pdt)
      shift; pdt=${1}; shift;;
    -ct)
      shift; ct=${1}; shift;;      
    -nofpm)
      shift; nofpm="true";;
    -csfgm)
        shift; 
	if [ ${edge}x != "x" ]
	then
	  echo "Error: can not turn on both edge and csfgm cleaners"
	  exit;
	fi
	csfgm="true"
	edge="false";;
    -edge)
        shift;
	if [ ${csfgm}x = "true" ]
	then
	  echo "Error: can not turn on both edge and csfgm cleaners"
	  exit;
	fi
	csfgm="false"
	edge="true";;
    -vdilateball)
        shift; vdilateball=${1}; shift;;
    -vdilatecross)
        shift; vdilatecross=${1}; shift;;	
    -minobjectsize)
        shift; minobjectsize=${1}; shift;;
    -vcsf)
       shift; vcsf=${1}; shift;;
    -debug)
       shift; debug="true";;
    -forcefcm)
       shift; forcefcm="true";;
     -help)
      usage;;
    *)
      echo "Error: unknown option ${1}"; exit;;
    esac
  done
}

check_analyze(){
  if [ ! -f ${1}.img ]; then echo "Error:  ${1}.img not found"; exit; fi
  if [ ! -f ${1}.hdr ]; then echo "Error:  ${1}.hdr not found"; exit; fi
  if [ ${2}x != "x" ];  then echo "Error: Multiple files detected: ${*}"; exit; fi
}

##########################################
# Verify Input= "
##########################################

# Output usage message and exit 
if [ $# -lt 9 ]; then Usage; fi

parse_arguments ${*}

if [ ${t2}x = "x" ];   then echo "Error: must supply T2 image with -t2 option"; exit; fi
if [ ${pd}x = "x" ];   then echo "Error: must supply pd image with -pd option"; exit; fi
if [ ${seg}x = "x" ];  then echo "Error: must supply segmentation image with -seg option"; exit; fi
if [ ${out}x = "x" ];   then echo "Error: must supply output image with -out option"; exit; fi
if [ ${t2t}x = "x" ];   then t2t=0.02; fi
if [ ${pdt}x = "x" ];   then pdt=0.05; fi
if [ ${vcsf}x = "x" ];   then vcsf=7; fi
if [ ${ct}x = "x" ];      then ct=150; fi
if [ ${debug}x = "x" ]; then debug="false"; fi
if [ ${minobjectsize}x = "x" ]; then minobjectsize=5; fi
if [ ${vdilatecross}x = "x" ] && [ ${vdilateball}x = "x" ]; then vdilateball=1; fi;
if [ ${nofpm}x = "x" ]; then nofpm=false; fi
if [ ${edge}x = "x" ] && [ ${csfgm}x = "x" ] && [ ${nofpm} = "false" ]; then  csfgm="true";  edge="false"; fi;
if [ ${csfgm} = true ] && [ ${t1}x = "x" ]; then echo "Error: must supply T1 image with -t1 option when using the -csfgm option"; exit; fi
if [ ${forcefcm}x = "x" ]; then forcefcm="false"; fi

echo t1:   ${t1}
echo t2:   ${t2}
echo pd:   ${pd}
echo seg: ${seg}
echo out: ${out}
echo t2t:  ${t2t}
echo pdt:  ${pdt}
echo ct:    ${ct}
echo vdilatecross:   ${vdilatecross}
echo vdilateball:     ${vdilateball}
echo csfgm:     ${csfgm}
echo edge:      ${edge}
echo nofpm:    ${nofpm}
echo minobjectsize: ${minobjectsize}
echo vcsf:       ${vcsf}
echo debug:    ${debug}
echo forcefcm:  ${forcefcm}
echo ""
echo ""

# Check that image and header exist
if [ ${t1}x != "x" ]; then check_analyze ${t1}; fi
if [ ${t2}x != "x" ]; then check_analyze ${t2}; fi
if [ ${pd}x != "x" ]; then check_analyze ${pd}; fi
if [ ${seg}x != "x" ]; then check_analyze ${seg}; fi

##########################################
# Start processing
##########################################

#====================
# BYTE SWAPPING 
#===================

# force byte swapping in case necessary
# (quick fix because azhar's code does not do byte swapping and i'd rather not modify his code unless *absolutely* necessary)
${SBBINDIR}/SB/bin/imgmath ${t2}.img -min ${t2}.img ${t2}_bs.img
${SBBINDIR}/SB/bin/imgmath ${pd}.img -min ${pd}.img ${pd}_bs.img
${SBBINDIR}/SB/bin/imgmath ${seg}.img -min ${seg}.img ${seg}_bs.img -char

#=============================
# DILATE and REMOVE VCSF
#=============================

# dilate VCSF (removing VCSF-WMH partial volume voxels)
if [ ${vdilateball}x = "x" ] && [ ${vdilatecross}x = "x" ]; then vdilatecross=1; echo "yes"; fi
echo ${vdilatecross}
if [ ${vdilateball}x = "x" ]; then 
  ${SBBINDIR}/SB/bin/dilate2D ${seg}_bs.img ${seg}_dilated.img ${vcsf} ${vdilatecross} 1
else
  ${SBBINDIR}/SB/bin/dilate2D ${seg}_bs.img ${seg}_dilated.img ${vcsf} ${vdilateball} 2
fi

# remove background and VCSF voxels
${SBBINDIR}/SB/bin/mask_img ${t2}_bs ${seg}_dilated -o ${t2}_masked -m 0 ${vcsf}
${SBBINDIR}/SB/bin/mask_img ${pd}_bs ${seg}_dilated -o ${pd}_masked -m 0 ${vcsf}

#======================
# LE SEGMENTATION
#=====================

# segment
${SBBINDIR}/SB/bin/Lsegment ${t2}_masked ${out}_T2_lsegment -c ${t2t}
${SBBINDIR}/SB/bin/Lsegment ${pd}_masked ${out}_P_lsegment -c ${pdt}

# and the Lsegment results
${SBBINDIR}/SB/bin/imgmath ${out}_T2_lsegment.img -min ${out}_P_lsegment.img ${out}_P_and_T2_lsegment.img

if [ ${nofpm} = "false" ]; then

	#==================
	# EDGE CLEANING 
	#==================
	  if [ ${edge} = "true" ]; then
    	${SBBINDIR}/SB/bin/fillHoles ${out}_P_and_T2_lsegment ${out}_P_and_T2_lsegment_fillHoles
	    ${SBBINDIR}/SB/bin/cleanEdgeSeg ${out}_P_and_T2_lsegment_fillHoles  ${seg}_dilated ${out}_P_and_T2_lsegment_fpm_masked ${vcsf}
    fi
  
	#===================
	# CSFGM CLEANING
	#===================

	if [ ${csfgm} = "true" ]; 
	then
     # mask T1
    
    if [ ! -f ${t1}_masked_fc4_mc2_ex2.img ] || [ ${forcefcm} = "true" ]; then
      ${SBBINDIR}/SB/bin/mask_img ${t1} ${seg} -m 0   
      # run FCM on masked T1
      ${SBBINDIR}/FLEX/bin/FLEX_fcm ${t1}_masked.img 4  2 100 0.00001
      rm ${t1}_masked_fc4_mc[1,3-4]_ex2.*
    fi

    # create SCSFGM (sulcal-CSF-GM) mask
        ${SBBINDIR}/SB/bin/SCSFGM ${seg}.img ${t1}_masked_fc4_mc2_ex2.img ${t1} ${ct}

    # mask LE with SCSFGM
    ${SBBINDIR}/SB/bin/mask_img ${out}_P_and_T2_lsegment ${t1}_csfgm -o ${out}_P_and_T2_lsegment_fpm_masked -m 0 1
    fi
	
	#=======================
	# KEEP LARGE OBJECTS 
	#=======================

	${SBBINDIR}/SB/bin/keep_large_objects ${out}_P_and_T2_lsegment_fpm_masked.img ${minobjectsize} ${out}_P_and_T2_lsegment_fpm_masked_klo.img

	#=========================================
	# COMBINE CLEAN and UNCLEAN LE SEGs
	#=========================================

	${SBBINDIR}/SB/bin/imgmath ${out}_P_and_T2_lsegment_fpm_masked_klo.img -add ${out}_P_and_T2_lsegment.img ${out}_P_and_T2_lsegment_fpm_klo.img

fi  # end if ${nofpm}
#================
# FILE CLEANUP
#================

rm ${t2}_bs.*
rm ${pd}_bs.*
rm ${seg}_bs.*

if [ ${debug} = "false" ]; then
  rm ${seg}_dilated.*
  rm ${t2}_masked.*
  rm ${pd}_masked.*
  rm ${out}_T2_lsegment.*
  rm ${out}_P_lsegment.*
  rm ${out}_P_and_T2_lsegment.*
  
  if [ ${edge} = true ]; then
    rm ${out}_P_and_T2_lsegment_fillHoles.*
  fi
    
fi
